{"version":3,"sources":["BucketList.js","firebase.js","redux/modules/bucket.js","Detail.js","NotFound.js","assets/profile.PNG","redux/modules/UserInfo.js","Progress.js","Spinner.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["ListStyle","styled","div","ItemStyle","props","completed","BucketList","bucket_list","useSelector","state","bucket","list","console","log","map","index","className","onClick","history","push","text","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","initialState","is_loaded","bucket_db","collection","isLoaded","loaded","type","updateBucketNoteFB","bucket_index","bucketNote","dispatch","getState","_bucket_data","id","bucket_data","bucket_note","doc","update","then","res","updateBucketNote","catch","err","Detail","useDispatch","parseInt","match","params","buttonLable","size","useState","setBucketNote","method","rows","cols","onChange","document","getElementById","value","ButtonGroup","Button","variant","color","updateBucketCompleted","updateBucket","goBack","delete","deleteBucket","alert","NotFound","UserInfo","TopContainer","Avatar","src","image","Title","h1","h5","h6","ProgressBar","HighLight","width","Dot","Progress","count","l","idx","length","Outter","Spinner","Eco","style","fontSize","App","addBucketList","new_item","current","create","React","createRef","this","load","Container","Fragment","Line","path","exact","component","Input","ref","Component","hr","connect","get","docs","forEach","data","exists","add","docRef","createBucket","window","withRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","createBrowserHistory","thunk","enhancer","applyMiddleware","rootReducer","combineReducers","action","new_bucket_list","filter","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.ce740444.chunk.js","sourcesContent":["// 리액트 패키지를 불러옵니다.\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// redux hook을 불러옵니다.\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst BucketList = (props) => {\r\n  // 버킷리스트를 리덕스 훅으로 가져오기\r\n  const bucket_list = useSelector((state) => state.bucket.list);\r\n  console.log(bucket_list);\r\n\r\n  return (\r\n    <ListStyle>\r\n      {bucket_list.map((list, index) => {\r\n        return (\r\n          <ItemStyle\r\n            className=\"list_item\"\r\n            completed={list.completed}\r\n            key={index}\r\n            onClick={() => {\r\n              // 배열의 몇번째 항목을 눌렀는 지, url 파라미터로 넘겨줍니다.\r\n              props.history.push(\"/detail/\" + index);\r\n            }}\r\n          >\r\n            {list.text}\r\n          </ItemStyle>\r\n        );\r\n      })}\r\n    </ListStyle>\r\n  );\r\n};\r\n\r\nconst ListStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 50vh;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  max-height: 50vh;\r\n`;\r\n\r\nconst ItemStyle = styled.div`\r\n  padding: 16px;\r\n  margin: 8px;\r\n  font-weight: 600;\r\n  color: ${(props) => (props.completed ? \"#fff\" : \"#212121\")};\r\n  background-color: ${(props) => (props.completed ? \"#673ab7\" : \"#eee\")};\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport default BucketList;\r\n","//firebase.js\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  // firebase 설정과 관련된 개인 정보\r\n  apiKey: \"AIzaSyBY1U8ClMOp6J4SdclIF1hg7g1KLp6jhaw\",\r\n  authDomain: \"bucketlist-73696.firebaseapp.com\",\r\n  projectId: \"bucketlist-73696\",\r\n  storageBucket: \"bucketlist-73696.appspot.com\",\r\n  messagingSenderId: \"362949241044\",\r\n  appId: \"1:362949241044:web:582d406716a6e217253341\",\r\n  measurementId: \"G-P4VBD9H4W5\",\r\n};\r\n\r\n// firebaseConfig 정보로 firebase 시작\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// firebase의 firestore 인스턴스를 변수에 저장\r\nconst firestore = firebase.firestore();\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\nexport { firestore };\r\n","import { ContactSupportOutlined } from \"@material-ui/icons\";\r\nimport { firestore } from \"../../firebase\";\r\n\r\n// Actions\r\nconst LOAD = \"bucket/LOAD\";\r\nconst CREATE = \"bucket/CREATE\";\r\nconst DELETE = \"bucket/DELETE\";\r\nconst UPDATE = \"bucket/UPDATE\";\r\nconst UPDATECOMPLETED = \"bucket/UPDATECOMPLETED\";\r\nconst UPDATENOTE = \"bucket/UPDATENOTE\";\r\n\r\n// is loaded\r\nconst LOADED = \"bucket/LOADED\";\r\n\r\nconst initialState = {\r\n  is_loaded: false,\r\n  list: [\r\n    // { text: \"영화관 가기\", completed: false },\r\n    // { text: \"매일 책읽기\", completed: false },\r\n    // { text: \"수영 배우기\", completed: false },\r\n  ],\r\n};\r\n\r\n// const bucket_db_load = firestore\r\n// .collection(\"bucket\")\r\n// .orderBy(\"completed\", \"desc\");\r\nconst bucket_db = firestore.collection(\"bucket\");\r\n\r\n// Action Creators\r\nexport const loadBucket = (bucket) => {\r\n  return { type: LOAD, bucket };\r\n};\r\n\r\nexport const createBucket = (bucket) => {\r\n  return { type: CREATE, bucket };\r\n};\r\n\r\nexport const deleteBucket = (bucket) => {\r\n  return { type: DELETE, bucket };\r\n};\r\n\r\nexport const updateBucket = (bucket) => {\r\n  return { type: UPDATE, bucket };\r\n};\r\n\r\nexport const updateBucketNote = (bucket_index, bucketNote) => {\r\n  return { type: UPDATENOTE, bucket_index, bucketNote };\r\n};\r\n\r\nexport const updateBucketCompleted = (bucket) => {\r\n  return { type: UPDATECOMPLETED, bucket };\r\n};\r\n\r\n// loaded를 받아서 is_loaded 값을 true/false로 바꿔줄 액션 생성 함수입니다.\r\nexport const isLoaded = (loaded) => {\r\n  return { type: LOADED, loaded };\r\n};\r\n\r\n// 파이어베이스랑 통신하는 부분\r\nexport const loadBucketFB = () => {\r\n  return function (dispatch) {\r\n    bucket_db.get().then((docs) => {\r\n      let bucket_data = [];\r\n      docs.forEach((doc) => {\r\n        // 도큐먼트 객체를 확인해보자!\r\n        console.log(doc);\r\n        // console.log(doc.data().bucket_note);\r\n        // 도큐먼트 데이터 가져오기\r\n        console.log(doc.data());\r\n        // 도큐먼트 id 가져오기\r\n        console.log(doc.id);\r\n\r\n        if (doc.exists) {\r\n          const bucketNoteVal = doc.data().bucket_note;\r\n          bucket_data = [...bucket_data, { id: doc.id, ...doc.data() }];\r\n          console.log(doc.data().bucket_note);\r\n        }\r\n      });\r\n      console.log(bucket_data);\r\n      // 이제 액션이 디스패치 되도록 해줍시다! 그러면 끝!\r\n      dispatch(loadBucket(bucket_data));\r\n    });\r\n  };\r\n};\r\n\r\nexport const addBucketFB = (bucket) => {\r\n  return function (dispatch) {\r\n    // 요청 보내기 전에 스피너를 보여줍시다\r\n    dispatch(isLoaded(false));\r\n\r\n    // 생성할 데이터를 미리 만들게요!\r\n    let bucket_data = {\r\n      text: bucket,\r\n      completed: false,\r\n      bucket_note: \"초기값으로 생성한 노트!\",\r\n    };\r\n\r\n    // add()에 데이터를 넘겨줍시다!\r\n    bucket_db\r\n      .add(bucket_data)\r\n      .then((docRef) => {\r\n        // id를 추가한다!\r\n        bucket_data = {\r\n          ...bucket_data,\r\n          id: docRef.id,\r\n          bucket_note: docRef.bucket_note,\r\n        };\r\n\r\n        console.log(docRef.bucket_note);\r\n\r\n        // 성공했을 때는? 액션 디스패치!\r\n        dispatch(createBucket(bucket_data));\r\n        console.log(bucket_data);\r\n\r\n        // 스피너도 다시 없애줘야죠!\r\n        dispatch(isLoaded(true));\r\n      })\r\n      .catch((err) => {\r\n        // 여긴 에러가 났을 때 들어오는 구간입니다!\r\n        console.log(err);\r\n        window.alert(\"오류가 났네요! 나중에 다시 시도해주세요!\");\r\n        // 스피너도 다시 없애줘야죠!\r\n        dispatch(isLoaded(true));\r\n      });\r\n  };\r\n};\r\n\r\nexport const updateBucketFB = (bucket) => {\r\n  return function (dispatch, getState) {\r\n    // state에 있는 값을 가져옵니다!\r\n    const _bucket_data = getState().bucket.list[bucket];\r\n\r\n    // id가 없으면? 바로 끝내버립시다.\r\n    if (!_bucket_data.id) {\r\n      return;\r\n    }\r\n\r\n    if (_bucket_data.completed === true) {\r\n      let bucket_data = { ..._bucket_data, completed: false };\r\n      bucket_db\r\n        .doc(bucket_data.id)\r\n        .update(bucket_data)\r\n        .then((res) => {\r\n          dispatch(updateBucketCompleted(bucket));\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err\");\r\n        });\r\n    } else {\r\n      // 새로운 값을 만들어요!\r\n      let bucket_data = { ..._bucket_data, completed: true };\r\n\r\n      bucket_db\r\n        .doc(_bucket_data.id)\r\n        .update(bucket_data)\r\n        .then((res) => {\r\n          dispatch(updateBucket(bucket));\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err\");\r\n        });\r\n    }\r\n  };\r\n};\r\nexport const updateBucketNoteFB = (bucket_index, bucketNote) => {\r\n  return function (dispatch, getState) {\r\n    // console.log(getState);\r\n    // state에 있는 값을 가져옵니다!\r\n    const _bucket_data = getState().bucket.list[bucket_index];\r\n    // console.log(getState().bucket.list[bucket_index]);\r\n    // id가 없으면? 바로 끝내버립시다.\r\n    if (!_bucket_data.id) {\r\n      return;\r\n    }\r\n\r\n    // 새로운 값을 만들어요!\r\n    let bucket_data = { ..._bucket_data, bucket_note: bucketNote };\r\n    bucket_db\r\n      .doc(bucket_data.id)\r\n      .update(bucket_data)\r\n      .then((res) => {\r\n        console.log(bucketNote);\r\n        dispatch(updateBucketNote(bucket_index, bucketNote));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const deleteBucketFB = (bucket) => {\r\n  return function (dispatch, getState) {\r\n    const _bucket_data = getState().bucket.list[bucket];\r\n    // id가 없으면? 바로 끝내버립시다.\r\n    if (!_bucket_data.id) {\r\n      return;\r\n    }\r\n    // 삭제하기\r\n    bucket_db\r\n      .doc(_bucket_data.id)\r\n      .delete()\r\n      .then((res) => {\r\n        dispatch(deleteBucket(bucket));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\");\r\n      });\r\n  };\r\n};\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action) {\r\n  console.log(\"action: \", action);\r\n  switch (action.type) {\r\n    // do reducer stuff\r\n    case \"bucket/LOAD\": {\r\n      if (action.bucket.length > 0) {\r\n        return { list: action.bucket, is_loaded: true };\r\n      }\r\n\r\n      return state;\r\n    }\r\n\r\n    case \"bucket/CREATE\": {\r\n      const new_bucket_list = [...state.list, action.bucket];\r\n      return { ...state, list: new_bucket_list };\r\n    }\r\n\r\n    case \"bucket/DELETE\": {\r\n      const bucket_list = state.list.filter((l, idx) => {\r\n        if (idx !== action.bucket) {\r\n          return l;\r\n        }\r\n      });\r\n      return { ...state, list: bucket_list };\r\n    }\r\n\r\n    case \"bucket/UPDATE\": {\r\n      const bucket_list = state.list.map((l, idx) => {\r\n        if (idx === action.bucket) {\r\n          console.log(action.bucket);\r\n          return { ...l, completed: true };\r\n        }\r\n        return l;\r\n      });\r\n      return { ...state, list: bucket_list };\r\n    }\r\n\r\n    // Completed의 값을 false로 변경\r\n    case \"bucket/UPDATECOMPLETED\": {\r\n      const bucket_list = state.list.map((l, idx) => {\r\n        if (idx === action.bucket) {\r\n          console.log(action.bucket);\r\n          return { ...l, completed: false };\r\n        }\r\n        return l;\r\n      });\r\n      return { ...state, list: bucket_list };\r\n    }\r\n\r\n    // NOTE 값 변경\r\n    case \"bucket/UPDATENOTE\": {\r\n      console.log(state.list);\r\n      console.log(action);\r\n      const bucket_list = state.list.map((l, idx) => {\r\n        if (idx === action.bucket_index) {\r\n          console.log(action.bucketNote);\r\n\r\n          return { ...l, bucket_note: action.bucketNote };\r\n        }\r\n        return l;\r\n      });\r\n      console.log(bucket_list);\r\n      console.log(\"state: \", state);\r\n      return { ...state, list: bucket_list };\r\n    }\r\n\r\n    case \"bucket/LOADED\": {\r\n      return { ...state, is_loaded: action.loaded };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// 리액트 패키지를 불러옵니다.\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { ImHome } from \"react-icons/im\";\r\nimport { ImCheckmark, ImCheckmark2, ImFacebook2 } from \"react-icons/im\";\r\nimport { GoTrashcan } from \"react-icons/go\";\r\n\r\n// redux hook을 불러옵니다.\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// 내가 만든 액션 생성 함수를 불러옵니다.\r\nimport {\r\n  deleteBucket,\r\n  updateBucket,\r\n  deleteBucketFB,\r\n  updateBucketFB,\r\n  updateBucketNoteFB,\r\n} from \"./redux/modules/bucket\";\r\n\r\nconst Detail = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // 스토어에서 상태값 가져오기\r\n  const bucket_list = useSelector((state) => state.bucket.list);\r\n\r\n  console.log(bucket_list);\r\n  // url 파라미터에서 인덱스 가져오기\r\n  let bucket_index = parseInt(props.match.params.index);\r\n  const buttonLable = bucket_list[bucket_index].completed ? (\r\n    <ImCheckmark size=\"30\" />\r\n  ) : (\r\n    <ImCheckmark2 size=\"30\" />\r\n  );\r\n\r\n  const [bucketNote, setBucketNote] = useState(null);\r\n  console.log(bucket_list[bucket_index].bucket_note);\r\n  console.log(bucketNote);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{bucket_list[bucket_index].text}</h2>\r\n      <form id=\"noter-save-form\" method=\"POST\">\r\n        <div className=\"form-group\">\r\n          {/* <label for=\"exampleFormControlTextarea1\"></label> */}\r\n          <textarea\r\n            type=\"text\"\r\n            id=\"textarea\"\r\n            rows=\"20\"\r\n            cols=\"49\"\r\n            onChange={() => {\r\n              setBucketNote(document.getElementById(\"textarea\").value);\r\n              dispatch(updateBucketNoteFB(bucket_index, bucketNote));\r\n            }}\r\n          >\r\n            {bucket_list[bucket_index].bucket_note}\r\n          </textarea>\r\n        </div>\r\n      </form>\r\n      <ButtonGroup>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            if (\r\n              document.getElementById(\"textarea\").value ===\r\n              bucket_list[bucket_index].bucket_note\r\n            ) {\r\n              return;\r\n            }\r\n            setBucketNote(document.getElementById(\"textarea\").value);\r\n            console.log(\"updateBucketNoteFB Go\");\r\n            dispatch(updateBucketNoteFB(bucket_index, bucketNote));\r\n          }}\r\n        >\r\n          노트저장\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            //alert(\"정말 삭제하시겠습니까?\")\r\n            dispatch(updateBucketFB(bucket_index));\r\n            props.history.goBack();\r\n          }}\r\n        >\r\n          {buttonLable}\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={() => {\r\n            dispatch(deleteBucketFB(bucket_index));\r\n            props.history.goBack();\r\n          }}\r\n        >\r\n          <GoTrashcan size=\"30\" />\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={() => {\r\n            //추가한 노트를 저장하지 않고 홈으로 가는 경우\r\n            // 이코드를 실행할 경우, 최신값이 화면에 보여지지않는 에러가 발생함.\r\n            // if (\r\n            //   document.getElementById(\"textarea\").value !==\r\n            //   bucket_list[bucket_index].bucket_note\r\n            // ) {\r\n            //   //추가한 노트를 저장후 홈으로 이동\r\n            //   setBucketNote(document.getElementById(\"textarea\").value);\r\n            //   dispatch(updateBucketNoteFB(bucket_index, bucketNote));\r\n            // }\r\n            props.history.goBack();\r\n          }}\r\n        >\r\n          <ImHome size=\"30\" />\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={() => {\r\n            alert(\"coming soon\");\r\n          }}\r\n        >\r\n          <ImFacebook2 size=\"28\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\n\r\nconst NotFound = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>주소가 올바르지 않아요!</h2>\r\n            <button onClick={() => {props.history.goBack();}}>뒤로가기</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;\r\n","export default __webpack_public_path__ + \"static/media/profile.565cbf60.PNG\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport image from \"../../assets/profile.PNG\";\r\n\r\n//유저이니셜 넣은 변수\r\nconst userName = \"H\";\r\nconst userTitle = \"내 버킷리스트\";\r\n\r\nfunction UserInfo() {\r\n  return (\r\n    <div>\r\n      <TopContainer>\r\n        <Avatar src={image}>{userName}</Avatar>\r\n      </TopContainer>\r\n      <Title>{userTitle}</Title>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserInfo;\r\n\r\nconst Title = styled.h1`\r\n  color: #673ab7;\r\n  text-align: center;\r\n`;\r\n\r\nconst Reload = styled.h5`\r\n  color: #ddd;\r\n  text-align: right;\r\n  margin: 0;\r\n`;\r\n\r\nconst avatarConfig = styled.h6`\r\n  color: #ddd;\r\n  width: spacing(15);\r\n  height: spacing(15);\r\n`;\r\nconst TopContainer = styled.h5`\r\n  display: flex;\r\n  color: #ddd;\r\n  text-align: right;\r\n  // border: 1px solid #000;\r\n  margin: 0;\r\n`;\r\n","// 리액트 패키지를 불러옵니다.\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// redux hook을 불러옵니다.\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// 내가 만든 액션 생성 함수를 불러옵니다.\r\nimport { deleteBucket, updateBucket } from \"./redux/modules/bucket\";\r\n\r\nconst Progress = (props) => {\r\n  // 스토어에서 상태값 가져오기\r\n  const bucket_list = useSelector((state) => state.bucket.list);\r\n\r\n  let count = 0;\r\n\r\n  let goal_per = bucket_list.map((l, idx) => {\r\n    if (l.completed) {\r\n      count++;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <ProgressBar>\r\n      <HighLight width={(count / bucket_list.length) * 100 + \"%\"}></HighLight>\r\n      <Dot />\r\n    </ProgressBar>\r\n  );\r\n};\r\n\r\nconst ProgressBar = styled.div`\r\n  background: #eee;\r\n  width: 100%;\r\n  height: 20px;\r\n  display: flex;\r\n  border-radius: 10px;\r\n  align-items: center;\r\n`;\r\n\r\nconst HighLight = styled.div`\r\n  background: #673ab7;\r\n  width: ${(props) => props.width};\r\n  height: 20px;\r\n  border-radius: 10px;\r\n  transition: 2s;\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  background: #fff;\r\n  border: 5px solid #673ab7;\r\n  box-sizing: border-box;\r\n  margin: 0px 0px 0px -10px;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 20px;\r\n`;\r\nexport default Progress;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Eco } from \"@material-ui/icons\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <Outter>\r\n      <Eco style={{ color: \"#673ab7\", fontSize: \"150px\" }} />\r\n    </Outter>\r\n  );\r\n};\r\n\r\nconst Outter = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #ede2ff;\r\n`;\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\n\nimport { withRouter } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\n// import [컴포넌트 명] from [컴포넌트가 있는 파일경로];\nimport BucketList from \"./BucketList\";\nimport styled from \"styled-components\";\nimport Detail from \"./Detail\";\nimport NotFound from \"./NotFound\";\nimport UserInfo from \"./redux/modules/UserInfo\";\n\n// 리덕스 스토어와 연결하기 위해 connect라는 친구를 호출할게요!\nimport { connect } from \"react-redux\";\n// 리덕스 모듈에서 (bucket 모듈에서) 액션 생성 함수 두개를 가져올게요!\nimport {\n  loadBucket,\n  createBucket,\n  loadBucketFB,\n  addBucketFB,\n} from \"./redux/modules/bucket\";\nimport Progress from \"./Progress\";\n\nimport Spinner from \"./Spinner\";\n// firestore 가져오기\nimport { firestore } from \"./firebase\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { FcPlus } from \"react-icons/fc\";\n\n// 이 함수는 스토어가 가진 상태값을 props로 받아오기 위한 함수예요.\nconst mapStateTopProps = (state) => ({\n  bucket_list: state.bucket.list,\n  is_loaded: state.bucket.is_loaded,\n});\n\n// 이 함수는 값을 변화시키기 위한 액션 생성 함수를 props로 받아오기 위한 함수예요.\nconst mapDispatchToProps = (dispatch) => ({\n  load: () => {\n    dispatch(loadBucketFB());\n  },\n  create: (new_item) => {\n    console.log(new_item);\n    dispatch(addBucketFB(new_item));\n  },\n});\n\n// 클래스형 컴포넌트는 이렇게 생겼습니다!\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // App 컴포넌트의 state를 정의해줍니다.\n    this.state = {};\n    // ref는 이렇게 선언합니다!\n    this.text = React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.load();\n  }\n\n  addBucketList = () => {\n    const new_item = this.text.current.value;\n    if (new_item !== \"\") {\n      this.props.create(new_item);\n      this.text.current.value = \"\";\n    } else {\n      alert(\"버킷을 입력하세요\");\n      return;\n    }\n  };\n\n  // 랜더 함수 안에 리액트 엘리먼트를 넣어줍니다!\n  render() {\n    // 콘솔로 확인해요!\n    console.log(\"is_loaded? -> \", this.props.is_loaded);\n    return (\n      <div className=\"App\">\n        <Container>\n          <UserInfo />\n          {/* firestore에서 데이터를 가져온 후에만 페이지를 보여줄거예요!  */}\n          {!this.props.is_loaded ? (\n            <Spinner />\n          ) : (\n            <React.Fragment>\n              <Progress />\n              <Line />\n              <Switch>\n                <Route path=\"/\" exact component={BucketList} />\n                <Route path=\"/detail/:index\" component={Detail} />\n                <Route component={NotFound} />\n              </Switch>\n            </React.Fragment>\n          )}\n        </Container>\n        <Input>\n          <input type=\"text\" ref={this.text} />\n          <button onClick={this.addBucketList}>\n            <FcPlus size=\"32\" />\n          </button>\n        </Input>\n      </div>\n    );\n  }\n}\n\nconst Input = styled.div`\n  max-width: 350px;\n  min-height: 10vh;\n  background-color: #fff;\n  padding: 16px;\n  margin: 20px auto;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  & > * {\n    padding: 5px;\n  }\n\n  & input {\n    border-radius: 5px;\n    margin-right: 10px;\n    border: 1px solid #888;\n    width: 90%;\n    &:focus {\n      border: 1px solid #a673ff;\n    }\n  }\n\n  & button {\n    width: 25%;\n    color: #fff;\n    border: 1px solid #fff;\n    background-color: #fff;\n  }\n`;\n\nconst Container = styled.div`\n  max-width: 350px;\n  min-height: 60vh;\n  background-color: #fff;\n  padding: 16px;\n  margin: 20px auto;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n`;\n\nconst Line = styled.hr`\n  margin: 16px 0px;\n  border: 1px dotted #ddd;\n`;\n// withRouter 적용\n// connect로 묶어줬습니다!\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(App));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport bucket from \"./modules/bucket\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst enhancer = applyMiddleware(...middlewares);\r\nconst rootReducer = combineReducers({ bucket });\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n// 우리의 버킷리스트에 리덕스를 주입해줄 프로바이더를 불러옵니다!\nimport { Provider } from \"react-redux\";\n// 연결할 스토어도 가지고 와요.\nimport store from \"./redux/configStore\";\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}